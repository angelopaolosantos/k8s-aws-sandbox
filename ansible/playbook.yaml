- name: Kubernetes Prerequisites
  hosts: all
  become: true
  tasks:
    - name: Ping my hosts
      ansible.builtin.ping:

    - name: Get current hostname
      shell:
        cmd: hostname
      register: current_hostname

    - name: Get new hostname required by AWS cloud controller
      shell:
        cmd: curl http://169.254.169.254/latest/meta-data/local-hostname
      register: new_hostname

    - name: Update hostname for AWS cloud controller
      shell:
        cmd: hostnamectl set-hostname $(curl http://169.254.169.254/latest/meta-data/local-hostname)
      when: current_hostname.stdout != new_hostname.stdout

    - name: Print message
      ansible.builtin.debug:
        msg: Installing Kubernetes...

    - name: Disable swap
      shell:
        cmd: swapoff -a

    - name: Disable swap on startup
      shell:
        cmd: sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: Forwarding IPv4 and letting iptables see bridged traffic
      shell:
        cmd: |
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilterexit
          EOF
      args: 
        creates: /etc/modules-load.d/k8s.conf
        
    - name: Enable overlay module
      shell:
        cmd: modprobe overlay

    - name: Enable br_netfilter module
      shell:
        cmd: modprobe br_netfilter

    - name: Save sysctl params required by setup, params persist across reboots
      shell:
        cmd: |
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

    - name: Apply sysctl params without reboot
      shell:
        cmd: sysctl --system

    - name: Verify overlay is loaded
      shell:
        cmd: lsmod | grep overlay

      register: msg1

    - name: Verify br_netfilter is loaded
      shell:
        cmd: lsmod | grep br_netfilter
      register: msg2

    - name: Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, net.ipv4.ip_forward system variables are set to 1
      shell:
        cmd: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
      register: msg3

    - debug: var=msg1.stdout_lines
    - debug: var=msg2.stdout_lines
    - debug: var=msg3.stdout_lines

    - name: download containerd sources
      get_url:
        url: https://github.com/containerd/containerd/releases/download/v1.6.15/containerd-1.6.15-linux-amd64.tar.gz
        dest: /etc/containerd.tar.gz

    - name: extract containerd file
      unarchive:
        src: /etc/containerd.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: download containerd service file
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system/containerd.service

    - name: systemctl daemon-reload
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable service containerd and ensure it is not masked
      ansible.builtin.systemd:
        name: containerd
        enabled: yes
        masked: no
        state: started

    - name: Download runc.amd64
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
        dest: /etc/runc.amd64

    - name: Install runc.amd64
      shell:
        cmd: install -m 755 /etc/runc.amd64 /usr/local/sbin/runc

    - name: Download CNI Plugins
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
        dest: /etc/cni-plugins.tgz

    - name: Create /opt/cni/bin Directory
      file:
        path: /opt/cni/bin
        state: directory

    - name: Extract cni-plugins file
      unarchive:
        src: /etc/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: yes

    - name: Install kubelet, kubeadm, kubectl (Ubuntu)
      when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Ubuntu'
      block:
        - name: Update apt and install apt-transport-https, ca-certificates, curl
          apt:
            update_cache: yes
            pkg:
              - apt-transport-https
              - ca-certificates
              - curl

        - name: Create /etc/apt/keyrings/ Directory
          file:
            path: /etc/apt/keyrings/
            state: directory

        - name: Download the Google Cloud public signing key
          shell:
            cmd: curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
          args: 
            creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

        - name: Update APT sources list
          shell:
            cmd: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          args: 
            creates: /etc/apt/sources.list.d/kubernetes.list
        
        - name: Update apt and install kubelet, kubeadm, kubectl
          apt:
            update_cache: yes
            pkg:
              - kubelet
              - kubeadm
              - kubectl
        
        - name: Prevent kubelet from being upgraded
          ansible.builtin.dpkg_selections:
            name: kubelet
            selection: hold
        
        - name: Prevent kubeadm from being upgraded
          ansible.builtin.dpkg_selections:
            name: kubeadm
            selection: hold
        
        - name: Prevent kubectl from being upgraded
          ansible.builtin.dpkg_selections:
            name: kubectl
            selection: hold

        - name: Add kubelet argument into /etc/systemd/system/kubelet.service.d/20-hcloud.conf
          copy:
            dest: "/etc/systemd/system/kubelet.service.d/20-hcloud.conf"
            content: |
              [Service]
              Environment="KUBELET_EXTRA_ARGS=--cloud-provider=external"

    - name: Install kubelet, kubeadm, kubectl (RHEL)
      when: ansible_facts['distribution'] == 'CentOS' or ansible_facts['distribution'] == 'RedHat'
      block:
        
        - name: Creating /etc/yum.repos.d/kubernetes.repo
          copy:
            dest: "/etc/yum.repos.d/kubernetes.repo"
            content: |
              [kubernetes]
              name=Kubernetes
              baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-{{ ansible_facts['architecture'] }}
              enabled=1
              gpgcheck=1
              gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
              exclude=kubelet kubeadm kubectl

        - name: Set SELinux in permissive mode (effectively disabling it)
          shell:
            cmd: setenforce 0

        - name: Update /etc/selinux/config, Set SELINUX=permissive
          shell:
            cmd: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
        
        - name: Install kubelet kubeadm kubectl
          yum:
            disable_excludes: kubernetes
            name:
              - kubelet
              - kubeadm
              - kubectl
            state: present

        - name: Start and enable kubelet
          shell:
            cmd: systemctl enable --now kubelet

        - name: Add kubelet argument into /etc/systemd/system/kubelet.service.d/20-hcloud.conf
          copy:
            dest: "/etc/systemd/system/kubelet.service.d/20-hcloud.conf"
            content: |
              [Service]
              Environment="KUBELET_EXTRA_ARGS=--cloud-provider=external"
        


- name: Create Cluster using Kubeadm
  hosts: controlplanes
  become: true
  tasks:
    - name: Check if cluster is initialized
      shell: kubectl get cs | grep -c ok
      register: kubeadm_status
      become_user: ubuntu
      failed_when: kubeadm_status.rc == 2 # grep returns error code 2 for exceptions
      changed_when: false # so that the task won't be reported as "changed" every single time

    - name: Reset Cluster if initialized but not configured in kubectl
      shell: |
        kubeadm reset -f # force reset misconfigured cluster
        rm -rfv /etc/cni/net.d
        iptables --flush
      when: kubeadm_status.stdout == "0"
      failed_when: false
      changed_when: false

    - name: Copy cluster config into /etc/kubernetes
      copy:
        dest: "/etc/kubernetes/aws-cluster-config.yaml"
        content: |
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            serviceSubnet: "10.100.0.0/16"
            podSubnet: "10.244.0.0/16"
          apiServer:
            extraArgs:
              cloud-provider: "external"
          controllerManager:
            extraArgs:
              cloud-provider: "external"

#    - name: Initialize Cluster
#      shell: kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address={{ private_ip }}
#      when: kubeadm_status.stdout == "0"

    - name: Initialize Cluster
      shell: kubeadm init --config /etc/kubernetes/aws-cluster-config.yaml
      when: kubeadm_status.stdout == "0"

    - debug: var=kubeadm_status.stdout_lines
      
    - name: Create /home/ubuntu/.kube Directory
      file:
        path: "/home/ubuntu/.kube"
        state: directory
      become_user: ubuntu

    - name: Copy /etc/kubernetes/admin.conf to /home/ubuntu/.kube/config
      copy:
        src: /etc/kubernetes/admin.conf
        remote_src: yes
        dest:
          /home/ubuntu/.kube/config
          # force: no

    - name: Set /home/ubuntu/.kube Directory Owner and Group to ubuntu
      shell:
        cmd: sudo chown $(id -u):$(id -g) $HOME/.kube/config
      become_user: ubuntu

    - name: get join command
      shell: kubeadm token create --print-join-command 2>/dev/null
      register: join_command_raw
      become_user: ubuntu

    - debug: var=join_command_raw.stdout_lines

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"
      delegate_to: localhost
      delegate_facts: true
      run_once: true

- name: Add Workers to Cluster
  hosts: workers
  become: true
  tasks:
    - name: join cluster
      shell: "{{ hostvars['localhost'].join_command }} >> node_joined.txt"
      args:
        chdir: $HOME 
        creates: node_joined.txt # Runs task only once since file is created once
      
    - name: verify if node has joined the cluster
      shell: "cat $HOME/node_joined.txt"
      register: check_node_joined 
    
    - debug: var=check_node_joined.stdout_lines

- name: Install Weave Net
  hosts: controlplanes
  become: true
  become_user: ubuntu
  tasks:
  - name: Install Weave Net
    shell:
      cmd: |
        kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

- name: Fix Nodes NotReady Status
  hosts: all
  become: true
  tasks:
    - name: systemctl daemon-reload
      ansible.builtin.systemd:
        daemon_reload: yes
    - name: Restart kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
    - name: Restart containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
  tags:
    - restart_services

- name: Deploy AWS Cloud Controller Manager
  hosts: controlplanes
  become: true
  become_user: ubuntu
  tasks:
  - name: Copy AWS Cloud Controller Manager manifests
    ansible.builtin.copy:
      src: ../aws_ccm/
      dest: /home/ubuntu/aws_ccm
  - name: Apply AWS Cloud Controller Manager manifests
    shell:
      cmd: |
        kubectl apply -f /home/ubuntu/aws_ccm/.
  tags:
    - deploy_ccm
